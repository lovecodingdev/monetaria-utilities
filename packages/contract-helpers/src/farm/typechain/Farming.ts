/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface FarmingInterface extends utils.Interface {
  functions: {
    'POSITION_ID()': FunctionFragment;
    'STRATEGY()': FunctionFragment;
    '_IN_EXEC_LOCK()': FunctionFragment;
    'addCollateral(uint256,uint256,bool,bytes)': FunctionFragment;
    'config()': FunctionFragment;
    'debtShareToVal(uint256)': FunctionFragment;
    'debtValToShare(uint256)': FunctionFragment;
    'initialize(address)': FunctionFragment;
    'kill(uint256)': FunctionFragment;
    'lastAccrueTime()': FunctionFragment;
    'nextPositionID()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingInterest(uint256)': FunctionFragment;
    'positionInfo(uint256)': FunctionFragment;
    'positions(uint256)': FunctionFragment;
    'reduceReserve(uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'requestFunds(address,uint256)': FunctionFragment;
    'reservePool()': FunctionFragment;
    'token()': FunctionFragment;
    'totalToken()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'updateConfig(address)': FunctionFragment;
    'vaultDebtShare()': FunctionFragment;
    'vaultDebtVal()': FunctionFragment;
    'withdrawReserve(address,uint256)': FunctionFragment;
    'work(uint256,address,address,uint256,uint256,uint256,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'POSITION_ID'
      | 'STRATEGY'
      | '_IN_EXEC_LOCK'
      | 'addCollateral'
      | 'config'
      | 'debtShareToVal'
      | 'debtValToShare'
      | 'initialize'
      | 'kill'
      | 'lastAccrueTime'
      | 'nextPositionID'
      | 'owner'
      | 'pendingInterest'
      | 'positionInfo'
      | 'positions'
      | 'reduceReserve'
      | 'renounceOwnership'
      | 'requestFunds'
      | 'reservePool'
      | 'token'
      | 'totalToken'
      | 'transferOwnership'
      | 'updateConfig'
      | 'vaultDebtShare'
      | 'vaultDebtVal'
      | 'withdrawReserve'
      | 'work',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'POSITION_ID',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'STRATEGY', values?: undefined): string;
  encodeFunctionData(
    functionFragment: '_IN_EXEC_LOCK',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'addCollateral',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'config', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'debtShareToVal',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'debtValToShare',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'kill',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'lastAccrueTime',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'nextPositionID',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'pendingInterest',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'positionInfo',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'positions',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'reduceReserve',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'requestFunds',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'reservePool',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalToken',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateConfig',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultDebtShare',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'vaultDebtVal',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawReserve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'work',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'POSITION_ID',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'STRATEGY', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: '_IN_EXEC_LOCK',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addCollateral',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'debtShareToVal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'debtValToShare',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'kill', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastAccrueTime',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'nextPositionID',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'pendingInterest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'positionInfo',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'positions', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'reduceReserve',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'requestFunds',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'reservePool',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateConfig',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vaultDebtShare',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vaultDebtVal',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawReserve',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'work', data: BytesLike): Result;

  events: {
    'AddCollateral(uint256,uint256,uint256,uint256)': EventFragment;
    'AddDebt(uint256,uint256)': EventFragment;
    'Initialized(uint8)': EventFragment;
    'Kill(uint256,address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RemoveDebt(uint256,uint256)': EventFragment;
    'Work(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddCollateral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddDebt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Kill'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoveDebt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Work'): EventFragment;
}

export interface AddCollateralEventObject {
  id: BigNumber;
  amount: BigNumber;
  healthBefore: BigNumber;
  healthAfter: BigNumber;
}
export type AddCollateralEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AddCollateralEventObject
>;

export type AddCollateralEventFilter = TypedEventFilter<AddCollateralEvent>;

export interface AddDebtEventObject {
  id: BigNumber;
  debtShare: BigNumber;
}
export type AddDebtEvent = TypedEvent<
  [BigNumber, BigNumber],
  AddDebtEventObject
>;

export type AddDebtEventFilter = TypedEventFilter<AddDebtEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KillEventObject {
  id: BigNumber;
  killer: string;
  owner: string;
  posVal: BigNumber;
  debt: BigNumber;
  prize: BigNumber;
  left: BigNumber;
}
export type KillEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  KillEventObject
>;

export type KillEventFilter = TypedEventFilter<KillEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveDebtEventObject {
  id: BigNumber;
  debtShare: BigNumber;
}
export type RemoveDebtEvent = TypedEvent<
  [BigNumber, BigNumber],
  RemoveDebtEventObject
>;

export type RemoveDebtEventFilter = TypedEventFilter<RemoveDebtEvent>;

export interface WorkEventObject {
  id: BigNumber;
  loan: BigNumber;
}
export type WorkEvent = TypedEvent<[BigNumber, BigNumber], WorkEventObject>;

export type WorkEventFilter = TypedEventFilter<WorkEvent>;

export interface Farming extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FarmingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    POSITION_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    STRATEGY(overrides?: CallOverrides): Promise<[string]>;

    _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    addCollateral(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      goRogue: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[string]>;

    debtShareToVal(
      debtShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    debtValToShare(
      debtVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    initialize(
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    kill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    lastAccrueTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextPositionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingInterest(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    positionInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        mToken: string;
        worker: string;
        owner: string;
        debtShare: BigNumber;
      }
    >;

    reduceReserve(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    requestFunds(
      targetedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reservePool(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    updateConfig(
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vaultDebtShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    vaultDebtVal(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawReserve(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    work(
      id: PromiseOrValue<BigNumberish>,
      mToken: PromiseOrValue<string>,
      worker: PromiseOrValue<string>,
      principalAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxReturn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  POSITION_ID(overrides?: CallOverrides): Promise<BigNumber>;

  STRATEGY(overrides?: CallOverrides): Promise<string>;

  _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  addCollateral(
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    goRogue: PromiseOrValue<boolean>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  debtShareToVal(
    debtShare: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  debtValToShare(
    debtVal: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  initialize(
    _config: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  kill(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>;

  nextPositionID(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingInterest(
    value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  positionInfo(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>;

  positions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber] & {
      mToken: string;
      worker: string;
      owner: string;
      debtShare: BigNumber;
    }
  >;

  reduceReserve(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  requestFunds(
    targetedToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reservePool(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalToken(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  updateConfig(
    _config: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vaultDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

  vaultDebtVal(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawReserve(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  work(
    id: PromiseOrValue<BigNumberish>,
    mToken: PromiseOrValue<string>,
    worker: PromiseOrValue<string>,
    principalAmount: PromiseOrValue<BigNumberish>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    maxReturn: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    POSITION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    STRATEGY(overrides?: CallOverrides): Promise<string>;

    _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      goRogue: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    config(overrides?: CallOverrides): Promise<string>;

    debtShareToVal(
      debtShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    debtValToShare(
      debtVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _config: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    kill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextPositionID(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingInterest(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    positionInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        mToken: string;
        worker: string;
        owner: string;
        debtShare: BigNumber;
      }
    >;

    reduceReserve(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestFunds(
      targetedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    reservePool(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateConfig(
      _config: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vaultDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDebtVal(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReserve(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    work(
      id: PromiseOrValue<BigNumberish>,
      mToken: PromiseOrValue<string>,
      worker: PromiseOrValue<string>,
      principalAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxReturn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AddCollateral(uint256,uint256,uint256,uint256)'(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      healthBefore?: null,
      healthAfter?: null,
    ): AddCollateralEventFilter;
    AddCollateral(
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      healthBefore?: null,
      healthAfter?: null,
    ): AddCollateralEventFilter;

    'AddDebt(uint256,uint256)'(
      id?: PromiseOrValue<BigNumberish> | null,
      debtShare?: null,
    ): AddDebtEventFilter;
    AddDebt(
      id?: PromiseOrValue<BigNumberish> | null,
      debtShare?: null,
    ): AddDebtEventFilter;

    'Initialized(uint8)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'Kill(uint256,address,address,uint256,uint256,uint256,uint256)'(
      id?: PromiseOrValue<BigNumberish> | null,
      killer?: PromiseOrValue<string> | null,
      owner?: null,
      posVal?: null,
      debt?: null,
      prize?: null,
      left?: null,
    ): KillEventFilter;
    Kill(
      id?: PromiseOrValue<BigNumberish> | null,
      killer?: PromiseOrValue<string> | null,
      owner?: null,
      posVal?: null,
      debt?: null,
      prize?: null,
      left?: null,
    ): KillEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'RemoveDebt(uint256,uint256)'(
      id?: PromiseOrValue<BigNumberish> | null,
      debtShare?: null,
    ): RemoveDebtEventFilter;
    RemoveDebt(
      id?: PromiseOrValue<BigNumberish> | null,
      debtShare?: null,
    ): RemoveDebtEventFilter;

    'Work(uint256,uint256)'(
      id?: PromiseOrValue<BigNumberish> | null,
      loan?: null,
    ): WorkEventFilter;
    Work(
      id?: PromiseOrValue<BigNumberish> | null,
      loan?: null,
    ): WorkEventFilter;
  };

  estimateGas: {
    POSITION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    STRATEGY(overrides?: CallOverrides): Promise<BigNumber>;

    _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      goRogue: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    debtShareToVal(
      debtShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    debtValToShare(
      debtVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    kill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    lastAccrueTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextPositionID(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingInterest(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    positionInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    reduceReserve(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    requestFunds(
      targetedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reservePool(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    updateConfig(
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vaultDebtShare(overrides?: CallOverrides): Promise<BigNumber>;

    vaultDebtVal(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawReserve(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    work(
      id: PromiseOrValue<BigNumberish>,
      mToken: PromiseOrValue<string>,
      worker: PromiseOrValue<string>,
      principalAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxReturn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    POSITION_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STRATEGY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _IN_EXEC_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateral(
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      goRogue: PromiseOrValue<boolean>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtShareToVal(
      debtShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    debtValToShare(
      debtVal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    kill(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    lastAccrueTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPositionID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingInterest(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    positionInfo(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    positions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    reduceReserve(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    requestFunds(
      targetedToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reservePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    updateConfig(
      _config: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vaultDebtShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultDebtVal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawReserve(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    work(
      id: PromiseOrValue<BigNumberish>,
      mToken: PromiseOrValue<string>,
      worker: PromiseOrValue<string>,
      principalAmount: PromiseOrValue<BigNumberish>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      maxReturn: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
