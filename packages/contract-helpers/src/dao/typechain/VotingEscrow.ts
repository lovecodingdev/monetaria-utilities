/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface VotingEscrowInterface extends utils.Interface {
  functions: {
    'admin()': FunctionFragment;
    'apply_smart_wallet_checker()': FunctionFragment;
    'apply_transfer_ownership()': FunctionFragment;
    'balanceOf(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'balanceOfAt(address,uint256)': FunctionFragment;
    'changeController(address)': FunctionFragment;
    'checkpoint()': FunctionFragment;
    'commit_smart_wallet_checker(address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'controller()': FunctionFragment;
    'create_lock(uint256,uint256)': FunctionFragment;
    'decimals()': FunctionFragment;
    'deposit_for(address,uint256)': FunctionFragment;
    'epoch()': FunctionFragment;
    'future_admin()': FunctionFragment;
    'future_smart_wallet_checker()': FunctionFragment;
    'get_last_user_slope(address)': FunctionFragment;
    'increase_amount(uint256)': FunctionFragment;
    'increase_unlock_time(uint256)': FunctionFragment;
    'locked(address)': FunctionFragment;
    'locked__end(address)': FunctionFragment;
    'name()': FunctionFragment;
    'point_history(uint256)': FunctionFragment;
    'slope_changes(uint256)': FunctionFragment;
    'smart_wallet_checker()': FunctionFragment;
    'supply()': FunctionFragment;
    'symbol()': FunctionFragment;
    'token()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'totalSupply(uint256)': FunctionFragment;
    'totalSupplyAt(uint256)': FunctionFragment;
    'transfersEnabled()': FunctionFragment;
    'user_point_epoch(address)': FunctionFragment;
    'user_point_history(address,uint256)': FunctionFragment;
    'user_point_history__ts(address,uint256)': FunctionFragment;
    'version()': FunctionFragment;
    'withdraw()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'admin'
      | 'apply_smart_wallet_checker'
      | 'apply_transfer_ownership'
      | 'balanceOf(address,uint256)'
      | 'balanceOf(address)'
      | 'balanceOfAt'
      | 'changeController'
      | 'checkpoint'
      | 'commit_smart_wallet_checker'
      | 'commit_transfer_ownership'
      | 'controller'
      | 'create_lock'
      | 'decimals'
      | 'deposit_for'
      | 'epoch'
      | 'future_admin'
      | 'future_smart_wallet_checker'
      | 'get_last_user_slope'
      | 'increase_amount'
      | 'increase_unlock_time'
      | 'locked'
      | 'locked__end'
      | 'name'
      | 'point_history'
      | 'slope_changes'
      | 'smart_wallet_checker'
      | 'supply'
      | 'symbol'
      | 'token'
      | 'totalSupply()'
      | 'totalSupply(uint256)'
      | 'totalSupplyAt'
      | 'transfersEnabled'
      | 'user_point_epoch'
      | 'user_point_history'
      | 'user_point_history__ts'
      | 'version'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'apply_smart_wallet_checker',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'apply_transfer_ownership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf(address)',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOfAt',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'changeController',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'commit_smart_wallet_checker',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'commit_transfer_ownership',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'controller',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'create_lock',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'deposit_for',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'epoch', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'future_admin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'future_smart_wallet_checker',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'get_last_user_slope',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increase_amount',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'increase_unlock_time',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'locked',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'locked__end',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'point_history',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'slope_changes',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'smart_wallet_checker',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'supply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalSupply()',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply(uint256)',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupplyAt',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfersEnabled',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'user_point_epoch',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'user_point_history',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'user_point_history__ts',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'apply_smart_wallet_checker',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'apply_transfer_ownership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOf(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOf(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'balanceOfAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'changeController',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'checkpoint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'commit_smart_wallet_checker',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'commit_transfer_ownership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'create_lock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'deposit_for',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'epoch', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'future_admin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'future_smart_wallet_checker',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'get_last_user_slope',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increase_amount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increase_unlock_time',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'locked', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'locked__end',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'point_history',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'slope_changes',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'smart_wallet_checker',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'supply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply()',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply(uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupplyAt',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transfersEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'user_point_epoch',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'user_point_history',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'user_point_history__ts',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'ApplyOwnership(address)': EventFragment;
    'CommitOwnership(address)': EventFragment;
    'Deposit(address,uint256,uint256,int128,uint256)': EventFragment;
    'Supply(uint256,uint256)': EventFragment;
    'Withdraw(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApplyOwnership'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommitOwnership'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Supply'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface ApplyOwnershipEventObject {
  admin: string;
}
export type ApplyOwnershipEvent = TypedEvent<
  [string],
  ApplyOwnershipEventObject
>;

export type ApplyOwnershipEventFilter = TypedEventFilter<ApplyOwnershipEvent>;

export interface CommitOwnershipEventObject {
  admin: string;
}
export type CommitOwnershipEvent = TypedEvent<
  [string],
  CommitOwnershipEventObject
>;

export type CommitOwnershipEventFilter = TypedEventFilter<CommitOwnershipEvent>;

export interface DepositEventObject {
  provider: string;
  value: BigNumber;
  locktime: BigNumber;
  _type: BigNumber;
  ts: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface SupplyEventObject {
  prevSupply: BigNumber;
  supply: BigNumber;
}
export type SupplyEvent = TypedEvent<[BigNumber, BigNumber], SupplyEventObject>;

export type SupplyEventFilter = TypedEventFilter<SupplyEvent>;

export interface WithdrawEventObject {
  provider: string;
  value: BigNumber;
  ts: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface VotingEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    apply_smart_wallet_checker(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'balanceOf(address,uint256)'(
      addr: PromiseOrValue<string>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'balanceOf(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    balanceOfAt(
      addr: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    changeController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_smart_wallet_checker(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    create_lock(
      _value: PromiseOrValue<BigNumberish>,
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit_for(
      _addr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<[string]>;

    get_last_user_slope(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    increase_amount(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    increase_unlock_time(
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    locked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    locked__end(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    point_history(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    slope_changes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<[string]>;

    supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply(uint256)'(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    totalSupplyAt(
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    transfersEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    user_point_epoch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    user_point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    user_point_history__ts(
      _addr: PromiseOrValue<string>,
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  apply_smart_wallet_checker(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  apply_transfer_ownership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'balanceOf(address,uint256)'(
    addr: PromiseOrValue<string>,
    _t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'balanceOf(address)'(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  balanceOfAt(
    addr: PromiseOrValue<string>,
    _block: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  changeController(
    _newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkpoint(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_smart_wallet_checker(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  create_lock(
    _value: PromiseOrValue<BigNumberish>,
    _unlock_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  deposit_for(
    _addr: PromiseOrValue<string>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  future_smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

  get_last_user_slope(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  increase_amount(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  increase_unlock_time(
    _unlock_time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  locked(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

  locked__end(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  point_history(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  slope_changes(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

  supply(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply(uint256)'(
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  totalSupplyAt(
    _block: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  transfersEnabled(overrides?: CallOverrides): Promise<boolean>;

  user_point_epoch(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  user_point_history(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bias: BigNumber;
      slope: BigNumber;
      ts: BigNumber;
      blk: BigNumber;
    }
  >;

  user_point_history__ts(
    _addr: PromiseOrValue<string>,
    _idx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    apply_smart_wallet_checker(overrides?: CallOverrides): Promise<void>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    'balanceOf(address,uint256)'(
      addr: PromiseOrValue<string>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOf(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfAt(
      addr: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeController(
      _newController: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    commit_smart_wallet_checker(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    create_lock(
      _value: PromiseOrValue<BigNumberish>,
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit_for(
      _addr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

    get_last_user_slope(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increase_amount(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    increase_unlock_time(
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    locked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; end: BigNumber }>;

    locked__end(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    point_history(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    slope_changes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<string>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply(uint256)'(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupplyAt(
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transfersEnabled(overrides?: CallOverrides): Promise<boolean>;

    user_point_epoch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    user_point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bias: BigNumber;
        slope: BigNumber;
        ts: BigNumber;
        blk: BigNumber;
      }
    >;

    user_point_history__ts(
      _addr: PromiseOrValue<string>,
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'ApplyOwnership(address)'(admin?: null): ApplyOwnershipEventFilter;
    ApplyOwnership(admin?: null): ApplyOwnershipEventFilter;

    'CommitOwnership(address)'(admin?: null): CommitOwnershipEventFilter;
    CommitOwnership(admin?: null): CommitOwnershipEventFilter;

    'Deposit(address,uint256,uint256,int128,uint256)'(
      provider?: PromiseOrValue<string> | null,
      value?: null,
      locktime?: PromiseOrValue<BigNumberish> | null,
      _type?: null,
      ts?: null,
    ): DepositEventFilter;
    Deposit(
      provider?: PromiseOrValue<string> | null,
      value?: null,
      locktime?: PromiseOrValue<BigNumberish> | null,
      _type?: null,
      ts?: null,
    ): DepositEventFilter;

    'Supply(uint256,uint256)'(
      prevSupply?: null,
      supply?: null,
    ): SupplyEventFilter;
    Supply(prevSupply?: null, supply?: null): SupplyEventFilter;

    'Withdraw(address,uint256,uint256)'(
      provider?: PromiseOrValue<string> | null,
      value?: null,
      ts?: null,
    ): WithdrawEventFilter;
    Withdraw(
      provider?: PromiseOrValue<string> | null,
      value?: null,
      ts?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    apply_smart_wallet_checker(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'balanceOf(address,uint256)'(
      addr: PromiseOrValue<string>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'balanceOf(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    balanceOfAt(
      addr: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    changeController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_smart_wallet_checker(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    create_lock(
      _value: PromiseOrValue<BigNumberish>,
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit_for(
      _addr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_smart_wallet_checker(overrides?: CallOverrides): Promise<BigNumber>;

    get_last_user_slope(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    increase_amount(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    increase_unlock_time(
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    locked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    locked__end(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    point_history(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    slope_changes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    smart_wallet_checker(overrides?: CallOverrides): Promise<BigNumber>;

    supply(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply(uint256)'(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    totalSupplyAt(
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transfersEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    user_point_epoch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    user_point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    user_point_history__ts(
      _addr: PromiseOrValue<string>,
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apply_smart_wallet_checker(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'balanceOf(address,uint256)'(
      addr: PromiseOrValue<string>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'balanceOf(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      addr: PromiseOrValue<string>,
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    changeController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_smart_wallet_checker(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    create_lock(
      _value: PromiseOrValue<BigNumberish>,
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit_for(
      _addr: PromiseOrValue<string>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_smart_wallet_checker(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_last_user_slope(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    increase_amount(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    increase_unlock_time(
      _unlock_time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    locked(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    locked__end(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    point_history(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    slope_changes(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    smart_wallet_checker(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply(uint256)'(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    totalSupplyAt(
      _block: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transfersEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    user_point_epoch(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    user_point_history(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    user_point_history__ts(
      _addr: PromiseOrValue<string>,
      _idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
