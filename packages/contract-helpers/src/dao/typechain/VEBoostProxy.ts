/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface VEBoostProxyInterface extends utils.Interface {
  functions: {
    'adjusted_balance_of(address)': FunctionFragment;
    'apply_set_admins()': FunctionFragment;
    'commit_set_admins(address,address)': FunctionFragment;
    'delegation()': FunctionFragment;
    'emergency_admin()': FunctionFragment;
    'future_emergency_admin()': FunctionFragment;
    'future_ownership_admin()': FunctionFragment;
    'kill_delegation()': FunctionFragment;
    'ownership_admin()': FunctionFragment;
    'set_delegation(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'adjusted_balance_of'
      | 'apply_set_admins'
      | 'commit_set_admins'
      | 'delegation'
      | 'emergency_admin'
      | 'future_emergency_admin'
      | 'future_ownership_admin'
      | 'kill_delegation'
      | 'ownership_admin'
      | 'set_delegation',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'adjusted_balance_of',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'apply_set_admins',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'commit_set_admins',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'delegation',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'emergency_admin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'future_emergency_admin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'future_ownership_admin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'kill_delegation',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'ownership_admin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'set_delegation',
    values: [PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(
    functionFragment: 'adjusted_balance_of',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'apply_set_admins',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'commit_set_admins',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'delegation', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'emergency_admin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'future_emergency_admin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'future_ownership_admin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'kill_delegation',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ownership_admin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'set_delegation',
    data: BytesLike,
  ): Result;

  events: {
    'ApplyAdmins(address,address)': EventFragment;
    'CommitAdmins(address,address)': EventFragment;
    'DelegationSet(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ApplyAdmins'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommitAdmins'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DelegationSet'): EventFragment;
}

export interface ApplyAdminsEventObject {
  ownership_admin: string;
  emergency_admin: string;
}
export type ApplyAdminsEvent = TypedEvent<
  [string, string],
  ApplyAdminsEventObject
>;

export type ApplyAdminsEventFilter = TypedEventFilter<ApplyAdminsEvent>;

export interface CommitAdminsEventObject {
  ownership_admin: string;
  emergency_admin: string;
}
export type CommitAdminsEvent = TypedEvent<
  [string, string],
  CommitAdminsEventObject
>;

export type CommitAdminsEventFilter = TypedEventFilter<CommitAdminsEvent>;

export interface DelegationSetEventObject {
  delegation: string;
}
export type DelegationSetEvent = TypedEvent<[string], DelegationSetEventObject>;

export type DelegationSetEventFilter = TypedEventFilter<DelegationSetEvent>;

export interface VEBoostProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VEBoostProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjusted_balance_of(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    apply_set_admins(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    delegation(overrides?: CallOverrides): Promise<[string]>;

    emergency_admin(overrides?: CallOverrides): Promise<[string]>;

    future_emergency_admin(overrides?: CallOverrides): Promise<[string]>;

    future_ownership_admin(overrides?: CallOverrides): Promise<[string]>;

    kill_delegation(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    ownership_admin(overrides?: CallOverrides): Promise<[string]>;

    set_delegation(
      _delegation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  adjusted_balance_of(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  apply_set_admins(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_set_admins(
    _o_admin: PromiseOrValue<string>,
    _e_admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  delegation(overrides?: CallOverrides): Promise<string>;

  emergency_admin(overrides?: CallOverrides): Promise<string>;

  future_emergency_admin(overrides?: CallOverrides): Promise<string>;

  future_ownership_admin(overrides?: CallOverrides): Promise<string>;

  kill_delegation(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  ownership_admin(overrides?: CallOverrides): Promise<string>;

  set_delegation(
    _delegation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    adjusted_balance_of(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    apply_set_admins(overrides?: CallOverrides): Promise<void>;

    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    delegation(overrides?: CallOverrides): Promise<string>;

    emergency_admin(overrides?: CallOverrides): Promise<string>;

    future_emergency_admin(overrides?: CallOverrides): Promise<string>;

    future_ownership_admin(overrides?: CallOverrides): Promise<string>;

    kill_delegation(overrides?: CallOverrides): Promise<void>;

    ownership_admin(overrides?: CallOverrides): Promise<string>;

    set_delegation(
      _delegation: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ApplyAdmins(address,address)'(
      ownership_admin?: null,
      emergency_admin?: null,
    ): ApplyAdminsEventFilter;
    ApplyAdmins(
      ownership_admin?: null,
      emergency_admin?: null,
    ): ApplyAdminsEventFilter;

    'CommitAdmins(address,address)'(
      ownership_admin?: null,
      emergency_admin?: null,
    ): CommitAdminsEventFilter;
    CommitAdmins(
      ownership_admin?: null,
      emergency_admin?: null,
    ): CommitAdminsEventFilter;

    'DelegationSet(address)'(delegation?: null): DelegationSetEventFilter;
    DelegationSet(delegation?: null): DelegationSetEventFilter;
  };

  estimateGas: {
    adjusted_balance_of(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    apply_set_admins(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    delegation(overrides?: CallOverrides): Promise<BigNumber>;

    emergency_admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_emergency_admin(overrides?: CallOverrides): Promise<BigNumber>;

    future_ownership_admin(overrides?: CallOverrides): Promise<BigNumber>;

    kill_delegation(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    ownership_admin(overrides?: CallOverrides): Promise<BigNumber>;

    set_delegation(
      _delegation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjusted_balance_of(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    apply_set_admins(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_set_admins(
      _o_admin: PromiseOrValue<string>,
      _e_admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    delegation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergency_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    future_emergency_admin(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    future_ownership_admin(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    kill_delegation(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    ownership_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set_delegation(
      _delegation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
