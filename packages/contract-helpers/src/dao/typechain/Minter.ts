/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface MinterInterface extends utils.Interface {
  functions: {
    'allowed_to_mint_for(address,address)': FunctionFragment;
    'controller()': FunctionFragment;
    'mint(address)': FunctionFragment;
    'mint_for(address,address)': FunctionFragment;
    'mint_many(address[8])': FunctionFragment;
    'minted(address,address)': FunctionFragment;
    'toggle_approve_mint(address)': FunctionFragment;
    'token()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowed_to_mint_for'
      | 'controller'
      | 'mint'
      | 'mint_for'
      | 'mint_many'
      | 'minted'
      | 'toggle_approve_mint'
      | 'token',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'allowed_to_mint_for',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'controller',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint_for',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mint_many',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'minted',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'toggle_approve_mint',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'allowed_to_mint_for',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint_for', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint_many', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minted', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'toggle_approve_mint',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;

  events: {
    'Minted(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Minted'): EventFragment;
}

export interface MintedEventObject {
  recipient: string;
  gauge: string;
  minted: BigNumber;
}
export type MintedEvent = TypedEvent<
  [string, string, BigNumber],
  MintedEventObject
>;

export type MintedEventFilter = TypedEventFilter<MintedEvent>;

export interface Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowed_to_mint_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    mint(
      gauge_addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mint_for(
      gauge_addr: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    mint_many(
      gauge_addrs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    minted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    toggle_approve_mint(
      minting_user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  allowed_to_mint_for(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  controller(overrides?: CallOverrides): Promise<string>;

  mint(
    gauge_addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mint_for(
    gauge_addr: PromiseOrValue<string>,
    _for: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  mint_many(
    gauge_addrs: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  minted(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  toggle_approve_mint(
    minting_user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowed_to_mint_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    controller(overrides?: CallOverrides): Promise<string>;

    mint(
      gauge_addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    mint_for(
      gauge_addr: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    mint_many(
      gauge_addrs: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    minted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    toggle_approve_mint(
      minting_user: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'Minted(address,address,uint256)'(
      recipient?: PromiseOrValue<string> | null,
      gauge?: null,
      minted?: null,
    ): MintedEventFilter;
    Minted(
      recipient?: PromiseOrValue<string> | null,
      gauge?: null,
      minted?: null,
    ): MintedEventFilter;
  };

  estimateGas: {
    allowed_to_mint_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      gauge_addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mint_for(
      gauge_addr: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    mint_many(
      gauge_addrs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    minted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    toggle_approve_mint(
      minting_user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowed_to_mint_for(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      gauge_addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mint_for(
      gauge_addr: PromiseOrValue<string>,
      _for: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    mint_many(
      gauge_addrs: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    minted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    toggle_approve_mint(
      minting_user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
