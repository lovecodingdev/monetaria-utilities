/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../common';
import type { Minter, MinterInterface } from './Minter';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_controller',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'recipient',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'gauge',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'minted',
        type: 'uint256',
      },
    ],
    name: 'Minted',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'allowed_to_mint_for',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'controller',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'gauge_addr',
        type: 'address',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'gauge_addr',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_for',
        type: 'address',
      },
    ],
    name: 'mint_for',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[8]',
        name: 'gauge_addrs',
        type: 'address[8]',
      },
    ],
    name: 'mint_many',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'minted',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'minting_user',
        type: 'address',
      },
    ],
    name: 'toggle_approve_mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x608060405234801561001057600080fd5b5060405161097238038061097283398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6108b4806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a51e19041161005b578063a51e190414610131578063dd289d6014610144578063f77c4791146101b1578063fc0c546a146101f657600080fd5b806327f18ae31461008d5780636a627842146100a25780638b752bb0146100b5578063a0990033146100f3575b600080fd5b6100a061009b366004610670565b610216565b005b6100a06100b03660046106a3565b61025d565b6100e06100c3366004610670565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b610121610101366004610670565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ea565b6100a061013f3660046106c5565b61026a565b6100a06101523660046106a3565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602090815260408083203384529091529020805460ff8116157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909116179055565b6001546101d19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ea565b6000546101d19073ffffffffffffffffffffffffffffffffffffffff1681565b33600090815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156102595761025982826102e1565b5050565b61026781336102e1565b50565b60005b600881101561025957600082826008811061028a5761028a610772565b602002015173ffffffffffffffffffffffffffffffffffffffff1614156102af575050565b6102cf8282600881106102c4576102c4610772565b6020020151336102e1565b806102d9816107d0565b91505061026d565b6001546040517f3f9095b700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000921690633f9095b79060240160206040518083038186803b15801561034d57600080fd5b505afa158015610361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103859190610809565b600f0b121561039357600080fd5b6040517f4b82009300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152831690634b82009390602401602060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610434919061082c565b506040517f0940070700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000919084169063094007079060240160206040518083038186803b1580156104a057600080fd5b505afa1580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d8919061084e565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526002602090815260408083209388168352929052908120549192509061051b9083610867565b90508015610641576000546040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015260248201849052909116906340c10f1990604401602060405180830381600087803b15801561059757600080fd5b505af11580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf919061082c565b5073ffffffffffffffffffffffffffffffffffffffff8381166000818152600260209081526040808320948916808452948252918290208690558151938452830185905290917f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f0910160405180910390a25b50505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461066b57600080fd5b919050565b6000806040838503121561068357600080fd5b61068c83610647565b915061069a60208401610647565b90509250929050565b6000602082840312156106b557600080fd5b6106be82610647565b9392505050565b60006101008083850312156106d957600080fd5b83601f8401126106e857600080fd5b60405181810181811067ffffffffffffffff82111715610731577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405290830190808583111561074657600080fd5b845b838110156107675761075981610647565b825260209182019101610748565b509095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610802576108026107a1565b5060010190565b60006020828403121561081b57600080fd5b815180600f0b81146106be57600080fd5b60006020828403121561083e57600080fd5b815180151581146106be57600080fd5b60006020828403121561086057600080fd5b5051919050565b600082821015610879576108796107a1565b50039056fea26469706673582212201bf95ef4c881f2013e9878acc4e930099a4c161e05cdf4d02afaba628f21b19464736f6c63430008090033';

type MinterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MinterConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Minter__factory extends ContractFactory {
  constructor(...args: MinterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _token: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<Minter> {
    return super.deploy(
      _token,
      _controller,
      overrides || {},
    ) as Promise<Minter>;
  }
  override getDeployTransaction(
    _token: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _controller, overrides || {});
  }
  override attach(address: string): Minter {
    return super.attach(address) as Minter;
  }
  override connect(signer: Signer): Minter__factory {
    return super.connect(signer) as Minter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MinterInterface {
    return new utils.Interface(_abi) as MinterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Minter {
    return new Contract(address, _abi, signerOrProvider) as Minter;
  }
}
