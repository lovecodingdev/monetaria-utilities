/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface GaugeControllerInterface extends utils.Interface {
  functions: {
    'add_gauge(address,int128)': FunctionFragment;
    'add_gauge(address,int128,int128)': FunctionFragment;
    'admin()': FunctionFragment;
    'apply_transfer_ownership()': FunctionFragment;
    'change_gauge_weight(address,uint256)': FunctionFragment;
    'change_type_weight(int128,uint256)': FunctionFragment;
    'checkpoint()': FunctionFragment;
    'checkpoint_gauge(address)': FunctionFragment;
    'commit_transfer_ownership(address)': FunctionFragment;
    'future_admin()': FunctionFragment;
    'gauge_relative_weight(address)': FunctionFragment;
    'gauge_relative_weight(address,uint256)': FunctionFragment;
    'gauge_relative_weight_write(address,uint256)': FunctionFragment;
    'gauge_relative_weight_write(address)': FunctionFragment;
    'gauge_type_names(int128)': FunctionFragment;
    'gauge_types(address)': FunctionFragment;
    'gauges(uint256)': FunctionFragment;
    'get_gauge_weight(address)': FunctionFragment;
    'get_total_weight()': FunctionFragment;
    'get_type_weight(int128)': FunctionFragment;
    'get_weights_sum_per_type(int128)': FunctionFragment;
    'last_user_vote(address,address)': FunctionFragment;
    'n_gauge_types()': FunctionFragment;
    'n_gauges()': FunctionFragment;
    'points_sum(int128,uint256)': FunctionFragment;
    'points_total(uint256)': FunctionFragment;
    'points_type_weight(int128,uint256)': FunctionFragment;
    'points_weight(address,uint256)': FunctionFragment;
    'time_sum(uint256)': FunctionFragment;
    'time_total()': FunctionFragment;
    'time_type_weight(uint256)': FunctionFragment;
    'time_weight(address)': FunctionFragment;
    'token()': FunctionFragment;
    'vote_for_gauge_weights(address,uint256)': FunctionFragment;
    'vote_user_power(address)': FunctionFragment;
    'vote_user_slopes(address,address)': FunctionFragment;
    'voting_escrow()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'add_gauge(address,int128)'
      | 'add_gauge(address,int128,int128)'
      | 'admin'
      | 'apply_transfer_ownership'
      | 'change_gauge_weight'
      | 'change_type_weight'
      | 'checkpoint'
      | 'checkpoint_gauge'
      | 'commit_transfer_ownership'
      | 'future_admin'
      | 'gauge_relative_weight(address)'
      | 'gauge_relative_weight(address,uint256)'
      | 'gauge_relative_weight_write(address,uint256)'
      | 'gauge_relative_weight_write(address)'
      | 'gauge_type_names'
      | 'gauge_types'
      | 'gauges'
      | 'get_gauge_weight'
      | 'get_total_weight'
      | 'get_type_weight'
      | 'get_weights_sum_per_type'
      | 'last_user_vote'
      | 'n_gauge_types'
      | 'n_gauges'
      | 'points_sum'
      | 'points_total'
      | 'points_type_weight'
      | 'points_weight'
      | 'time_sum'
      | 'time_total'
      | 'time_type_weight'
      | 'time_weight'
      | 'token'
      | 'vote_for_gauge_weights'
      | 'vote_user_power'
      | 'vote_user_slopes'
      | 'voting_escrow',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'add_gauge(address,int128)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'add_gauge(address,int128,int128)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'apply_transfer_ownership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'change_gauge_weight',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'change_type_weight',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpoint',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpoint_gauge',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'commit_transfer_ownership',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'future_admin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'gauge_relative_weight(address)',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'gauge_relative_weight(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'gauge_relative_weight_write(address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'gauge_relative_weight_write(address)',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'gauge_type_names',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'gauge_types',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'gauges',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'get_gauge_weight',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'get_total_weight',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'get_type_weight',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'get_weights_sum_per_type',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'last_user_vote',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'n_gauge_types',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'n_gauges', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'points_sum',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'points_total',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'points_type_weight',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'points_weight',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'time_sum',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'time_total',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'time_type_weight',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'time_weight',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'vote_for_gauge_weights',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'vote_user_power',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'vote_user_slopes',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'voting_escrow',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'add_gauge(address,int128)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'add_gauge(address,int128,int128)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'apply_transfer_ownership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'change_gauge_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'change_type_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'checkpoint', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'checkpoint_gauge',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'commit_transfer_ownership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'future_admin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gauge_relative_weight(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gauge_relative_weight(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gauge_relative_weight_write(address,uint256)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gauge_relative_weight_write(address)',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gauge_type_names',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gauge_types',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'gauges', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'get_gauge_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'get_total_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'get_type_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'get_weights_sum_per_type',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'last_user_vote',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'n_gauge_types',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'n_gauges', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'points_sum', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'points_total',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'points_type_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'points_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'time_sum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'time_total', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'time_type_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'time_weight',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'vote_for_gauge_weights',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vote_user_power',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'vote_user_slopes',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'voting_escrow',
    data: BytesLike,
  ): Result;

  events: {
    'AddType(string,int128)': EventFragment;
    'ApplyOwnership(address)': EventFragment;
    'CommitOwnership(address)': EventFragment;
    'NewGauge(address,int128,uint256)': EventFragment;
    'NewGaugeWeight(address,uint256,uint256,uint256)': EventFragment;
    'NewTypeWeight(int128,uint256,uint256,uint256)': EventFragment;
    'VoteForGauge(uint256,address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddType'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApplyOwnership'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CommitOwnership'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewGauge'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewGaugeWeight'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewTypeWeight'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VoteForGauge'): EventFragment;
}

export interface AddTypeEventObject {
  name: string;
  type_id: BigNumber;
}
export type AddTypeEvent = TypedEvent<[string, BigNumber], AddTypeEventObject>;

export type AddTypeEventFilter = TypedEventFilter<AddTypeEvent>;

export interface ApplyOwnershipEventObject {
  admin: string;
}
export type ApplyOwnershipEvent = TypedEvent<
  [string],
  ApplyOwnershipEventObject
>;

export type ApplyOwnershipEventFilter = TypedEventFilter<ApplyOwnershipEvent>;

export interface CommitOwnershipEventObject {
  admin: string;
}
export type CommitOwnershipEvent = TypedEvent<
  [string],
  CommitOwnershipEventObject
>;

export type CommitOwnershipEventFilter = TypedEventFilter<CommitOwnershipEvent>;

export interface NewGaugeEventObject {
  addr: string;
  gauge_type: BigNumber;
  weight: BigNumber;
}
export type NewGaugeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NewGaugeEventObject
>;

export type NewGaugeEventFilter = TypedEventFilter<NewGaugeEvent>;

export interface NewGaugeWeightEventObject {
  gauge_address: string;
  time: BigNumber;
  weight: BigNumber;
  total_weight: BigNumber;
}
export type NewGaugeWeightEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  NewGaugeWeightEventObject
>;

export type NewGaugeWeightEventFilter = TypedEventFilter<NewGaugeWeightEvent>;

export interface NewTypeWeightEventObject {
  type_id: BigNumber;
  time: BigNumber;
  weight: BigNumber;
  total_weight: BigNumber;
}
export type NewTypeWeightEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  NewTypeWeightEventObject
>;

export type NewTypeWeightEventFilter = TypedEventFilter<NewTypeWeightEvent>;

export interface VoteForGaugeEventObject {
  time: BigNumber;
  user: string;
  gauge_addr: string;
  weight: BigNumber;
}
export type VoteForGaugeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  VoteForGaugeEventObject
>;

export type VoteForGaugeEventFilter = TypedEventFilter<VoteForGaugeEvent>;

export interface GaugeController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaugeControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    'add_gauge(address,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'add_gauge(address,int128,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    change_gauge_weight(
      addr: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    change_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    checkpoint_gauge(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    future_admin(overrides?: CallOverrides): Promise<[string]>;

    'gauge_relative_weight(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'gauge_relative_weight(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    'gauge_relative_weight_write(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    'gauge_relative_weight_write(address)'(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    gauge_type_names(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    gauge_types(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    gauges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    get_gauge_weight(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    get_total_weight(overrides?: CallOverrides): Promise<[BigNumber]>;

    get_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    get_weights_sum_per_type(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    last_user_vote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    n_gauge_types(overrides?: CallOverrides): Promise<[BigNumber]>;

    n_gauges(overrides?: CallOverrides): Promise<[BigNumber]>;

    points_sum(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    points_total(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    points_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    points_weight(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    time_sum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    time_total(overrides?: CallOverrides): Promise<[BigNumber]>;

    time_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    time_weight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    vote_for_gauge_weights(
      _gauge_addr: PromiseOrValue<string>,
      _user_weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vote_user_power(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    vote_user_slopes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slope: BigNumber;
        power: BigNumber;
        end: BigNumber;
      }
    >;

    voting_escrow(overrides?: CallOverrides): Promise<[string]>;
  };

  'add_gauge(address,int128)'(
    addr: PromiseOrValue<string>,
    gauge_type: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'add_gauge(address,int128,int128)'(
    addr: PromiseOrValue<string>,
    gauge_type: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  apply_transfer_ownership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  change_gauge_weight(
    addr: PromiseOrValue<string>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  change_type_weight(
    type_id: PromiseOrValue<BigNumberish>,
    weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkpoint(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  checkpoint_gauge(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  commit_transfer_ownership(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  future_admin(overrides?: CallOverrides): Promise<string>;

  'gauge_relative_weight(address)'(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'gauge_relative_weight(address,uint256)'(
    addr: PromiseOrValue<string>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  'gauge_relative_weight_write(address,uint256)'(
    addr: PromiseOrValue<string>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  'gauge_relative_weight_write(address)'(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  gauge_type_names(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  gauge_types(
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  gauges(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>;

  get_gauge_weight(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  get_total_weight(overrides?: CallOverrides): Promise<BigNumber>;

  get_type_weight(
    type_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  get_weights_sum_per_type(
    type_id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  last_user_vote(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  n_gauge_types(overrides?: CallOverrides): Promise<BigNumber>;

  n_gauges(overrides?: CallOverrides): Promise<BigNumber>;

  points_sum(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

  points_total(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  points_type_weight(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  points_weight(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

  time_sum(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  time_total(overrides?: CallOverrides): Promise<BigNumber>;

  time_type_weight(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  time_weight(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  vote_for_gauge_weights(
    _gauge_addr: PromiseOrValue<string>,
    _user_weight: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vote_user_power(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  vote_user_slopes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      slope: BigNumber;
      power: BigNumber;
      end: BigNumber;
    }
  >;

  voting_escrow(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    'add_gauge(address,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    'add_gauge(address,int128,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    apply_transfer_ownership(overrides?: CallOverrides): Promise<void>;

    change_gauge_weight(
      addr: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    change_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    checkpoint(overrides?: CallOverrides): Promise<void>;

    checkpoint_gauge(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    future_admin(overrides?: CallOverrides): Promise<string>;

    'gauge_relative_weight(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'gauge_relative_weight(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'gauge_relative_weight_write(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'gauge_relative_weight_write(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gauge_type_names(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    gauge_types(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gauges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>;

    get_gauge_weight(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_total_weight(overrides?: CallOverrides): Promise<BigNumber>;

    get_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_weights_sum_per_type(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    last_user_vote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    n_gauge_types(overrides?: CallOverrides): Promise<BigNumber>;

    n_gauges(overrides?: CallOverrides): Promise<BigNumber>;

    points_sum(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    points_total(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    points_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    points_weight(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { bias: BigNumber; slope: BigNumber }>;

    time_sum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    time_total(overrides?: CallOverrides): Promise<BigNumber>;

    time_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    time_weight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    vote_for_gauge_weights(
      _gauge_addr: PromiseOrValue<string>,
      _user_weight: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vote_user_power(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vote_user_slopes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slope: BigNumber;
        power: BigNumber;
        end: BigNumber;
      }
    >;

    voting_escrow(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AddType(string,int128)'(name?: null, type_id?: null): AddTypeEventFilter;
    AddType(name?: null, type_id?: null): AddTypeEventFilter;

    'ApplyOwnership(address)'(admin?: null): ApplyOwnershipEventFilter;
    ApplyOwnership(admin?: null): ApplyOwnershipEventFilter;

    'CommitOwnership(address)'(admin?: null): CommitOwnershipEventFilter;
    CommitOwnership(admin?: null): CommitOwnershipEventFilter;

    'NewGauge(address,int128,uint256)'(
      addr?: null,
      gauge_type?: null,
      weight?: null,
    ): NewGaugeEventFilter;
    NewGauge(
      addr?: null,
      gauge_type?: null,
      weight?: null,
    ): NewGaugeEventFilter;

    'NewGaugeWeight(address,uint256,uint256,uint256)'(
      gauge_address?: null,
      time?: null,
      weight?: null,
      total_weight?: null,
    ): NewGaugeWeightEventFilter;
    NewGaugeWeight(
      gauge_address?: null,
      time?: null,
      weight?: null,
      total_weight?: null,
    ): NewGaugeWeightEventFilter;

    'NewTypeWeight(int128,uint256,uint256,uint256)'(
      type_id?: null,
      time?: null,
      weight?: null,
      total_weight?: null,
    ): NewTypeWeightEventFilter;
    NewTypeWeight(
      type_id?: null,
      time?: null,
      weight?: null,
      total_weight?: null,
    ): NewTypeWeightEventFilter;

    'VoteForGauge(uint256,address,address,uint256)'(
      time?: null,
      user?: null,
      gauge_addr?: null,
      weight?: null,
    ): VoteForGaugeEventFilter;
    VoteForGauge(
      time?: null,
      user?: null,
      gauge_addr?: null,
      weight?: null,
    ): VoteForGaugeEventFilter;
  };

  estimateGas: {
    'add_gauge(address,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'add_gauge(address,int128,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    change_gauge_weight(
      addr: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    change_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    checkpoint_gauge(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    future_admin(overrides?: CallOverrides): Promise<BigNumber>;

    'gauge_relative_weight(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'gauge_relative_weight(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    'gauge_relative_weight_write(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    'gauge_relative_weight_write(address)'(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    gauge_type_names(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gauge_types(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    gauges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_gauge_weight(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_total_weight(overrides?: CallOverrides): Promise<BigNumber>;

    get_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    get_weights_sum_per_type(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    last_user_vote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    n_gauge_types(overrides?: CallOverrides): Promise<BigNumber>;

    n_gauges(overrides?: CallOverrides): Promise<BigNumber>;

    points_sum(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    points_total(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    points_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    points_weight(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    time_sum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    time_total(overrides?: CallOverrides): Promise<BigNumber>;

    time_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    time_weight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    vote_for_gauge_weights(
      _gauge_addr: PromiseOrValue<string>,
      _user_weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vote_user_power(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    vote_user_slopes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    voting_escrow(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    'add_gauge(address,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'add_gauge(address,int128,int128)'(
      addr: PromiseOrValue<string>,
      gauge_type: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apply_transfer_ownership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    change_gauge_weight(
      addr: PromiseOrValue<string>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    change_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkpoint(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    checkpoint_gauge(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    commit_transfer_ownership(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    future_admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'gauge_relative_weight(address)'(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'gauge_relative_weight(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    'gauge_relative_weight_write(address,uint256)'(
      addr: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    'gauge_relative_weight_write(address)'(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    gauge_type_names(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    gauge_types(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    gauges(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_gauge_weight(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_total_weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get_type_weight(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    get_weights_sum_per_type(
      type_id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    last_user_vote(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    n_gauge_types(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    n_gauges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    points_sum(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    points_total(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    points_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    points_weight(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    time_sum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    time_total(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    time_type_weight(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    time_weight(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote_for_gauge_weights(
      _gauge_addr: PromiseOrValue<string>,
      _user_weight: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vote_user_power(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    vote_user_slopes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    voting_escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
